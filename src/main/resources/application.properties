spring.profiles.active=dev
server.port=3000

spring.application.name=notification-service

# PostgreSQL Configuration
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA Configuration
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Twilio Configuration
twilio.account.sid=AC4d41f32d5d70529ef388b284f5d956e1
twilio.auth.token=f88ecc5cc3921e400ac3681f436f5e1f
twilio.from.number=+18738000976

# SendGrid Configuration
sendgrid.api.key=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
sendgrid.sender.email=info@quiikmart.com

# Kafka Configuration
spring.kafka.template.default-topic=notificationTopic

# Kafka Listener - how long, in milliseconds, the poll() method will block if data is not available in Kafka.
# This helps manage how often your consumer checks for new messages.
spring.kafka.listener.poll-timeout=5000

# Consumer configuration
spring.kafka.consumer.group-id=notificationGroup
spring.kafka.consumer.enable-auto-commit=false
# Commit every second
spring.kafka.consumer.auto-commit-interval=1000
# Start reading from the latest offset if no offset is found
spring.kafka.consumer.auto-offset-reset=latest
#spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.max-poll-interval-ms=300000
spring.kafka.consumer.max-poll-records=10

# Producer Properties
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.retries=0

#logging.level.root=INFO
logging.level.root=DEBUG
#logging.level.com.quiikmart.notificationservice=INFO
logging.level.org.apache.kafka=ERROR
logging.level.org.springframework.kafka=ERROR
